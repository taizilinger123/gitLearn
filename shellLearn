jenkins
#!/bin/bash –xe
set -xe
cd /home/lab_idljenk/conv_perf_bench
python mkldnn_sha_monitor.py

#!/bin/bash -xe
cd /home/lab_idljenk/conv_perf_bench
./weekly.sh
case "$DATA_TYPE" in
        TxtDataLayer)
            DATA_TYPE="image"
            DATABASE="ImageDataLayer"
            ;;
        LMDBDataLayer)
            DATA_TYPE="lmdb"
            DATABASE="LMDBDataLayer"
            ;;
        Compressed_LMDBDataLayer)
            DATA_TYPE="lmdb"
            DATABASE="Compressed_LMDBDataLayer"
            ;;
        NoDataLayer)
            DATA_TYPE="nodata"
            DATABASE="NoDataLayer"
            ;;
Esac
  if [ $SHA != "NULL" ]; then
    git checkout $SHA
  fi


SERVERS=($(echo $BUILDS | sed "s/,/ /g"))
for SERVER in ${SERVERS[@]}
do
  wget -O "${SERVER}.out" http://10.91.54.11:8080/job/IntelCaffe_Artemis_Multinode_Train/label=Artemis/${SERVER}/consoleText
done
  if [ $(cat iter.log | wc -l) -lt 100 ]; then
    ACC=1
  else
    ACC=$[$(cat iter.log | wc -l)/$ACCURACY]
  Fi
  i=0
  while [ $i -lt $NODES_NUMBER ]
  do
      grep "Iteration" consoleText | grep "^\[${i}]" | sed "s/.*loss = //" > ${i}.log
      echo "\"stat_$SERV.chart\" using 1:$[$i+3]:xtic(2) with linespoints pt 7 title \"NODE_${i}\", \\" >> chart_${SERV}.in
      i=$[$i+1]
  done
  i=1
  while [ $i -le $max ]
  do
      ITER=`sed -n "$i"p iter.log`
      j=0
      while [ $j -lt $NODES_NUMBER ]
      do
          NODE=`sed -n "$i"p ${j}.log`
          ITER="$ITER $NODE"
          j=$[$j+1]
      done
      echo "$i $ITER"
      echo "$i $ITER" >> stat_${SERV}.chart
      i=$[$i+$ACC]
  done
if [ "${TEST_START_TIME}" == NULL ];
then
curl "http://intel-caffe.sh.intel.com/intelcaffe_dashboard_revision_te-caffe_dashboard/index.php?r=er/index"
else
curl "http://intel-caffe.sh.intel.com/intelcaffe_dashboard_revision_te-caffe_dashboard/index.php?r=er/index&test_start_time=$(echo ${TEST_START_TIME} | sed "s/ /%20/g" )"
fi
function CollectResults() {

    cd ${target_work_dir}/DeepBench/code/intel/spmm

    line=$(cat spmm_bench_1.log |wc -l)
    for ((i=1;i<=${line};i++))
    do

        j=0
        sum=0
        for f in spmm_bench_*.log
        do
            awk -v i=$i -v j=$j -F '|' '{
                if (NR == i){
                    if (j == 0){
                        printf ("%s\t%s\t%s\t%s|\t%s|\t",$1,$2,$3,$4,$5)
                    }else {
                        printf ("%s|\t",$5)
                    }
                }
            }' $f

            tmp=$(awk -v i=$i -F '|' '{
                if (NR == i){
                    printf ("%f",$5)
                }
            }' $f)
            sum=$(echo |awk -v tmp=${tmp} -v sum=${sum} '{
                printf ("%f",tmp + sum)
            }')
            ((j++))
        done

        # AVG
        avg=$(echo |awk -v j=$j -v sum=$sum '{
            printf ("%f",sum/j)
        }')

        # STD
        j=0
        sum=0
        for f in spmm_bench_*.log
        do
            tmp=$(awk -v i=$i -F '|' '{
                if (NR == i){
                    printf ("%f",$5)
                }
            }' $f)
            sum=$(echo |awk -v tmp=${tmp} -v avg=${avg} -v sum=${sum} '{
                printf ("%0.1000f",(tmp - avg) * (tmp - avg) + sum)
            }')
            ((j++))
        done
        std=$(echo |awk -v j=$j -v sum=${sum} '{
            printf ("%0.20f",sum/j)
        }')

        # Print avg,std
        if [ $i -eq 1 ];then
            printf "[ avg\tstd ]\n"
        else
            printf "[ ${avg}\t${std} ]\n"
        fi
    done
}
if [ $(echo $?) -eq 0 ];then
    CollectResults
Fi

cat > ${CAFFE_HOME}/run_fast_rcnn.sh << EOF
export http_proxy=http://child-prc.intel.com:913
export https_proxy=http://child-prc.intel.com:913
export ftp_proxy=http://child-prc.intel.com:913
cd $SCRIPT_HOME
/bin/bash -x ./Faster-RCNN_test.sh $CAFFE_HOME
if [ \$? -ne 0 ];then
	exit 1
fi
if [ ${CODE_COVERAGE} == true ];then
	bash -xe ${CAFFE_HOME}/caffe-ccov/ccov.sh ${CAFFE_HOME}
fi
EOF
srun -p skx-8180 --qos por-val bash -x ${CAFFE_HOME}/run_fast_rcnn.sh
srun -p ${HOSTNAME} bash -x ${CAFFE_HOME_A}/test_faster_rcnn.sh
git clone https://github.com/Microsoft/caffe.git caffe-fast-rcnn
cd caffe-fast-rcnn
patch -p1 <${TARGET_WORK_DIR}/caffe.patch
git show

[root@localhost tmp]# grep -niv  '^root' passwd   #-v取反
[root@localhost tmp]# grep  -nB 3 '^ftp' passwd 
9-mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
10-operator:x:11:0:operator:/ROOT:/sbin/nologin
11-games:x:12:100:games:/usr/games:/sbin/nologin
12:ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin
[root@localhost tmp]# grep  -nA 3 '^ftp' passwd 
12:ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin
13-nobody:x:99:99:Nobody:/:/sbin/nologin
14-systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin
15-dbus:x:81:81:System message bus:/:/sbin/nologin
[root@localhost tmp]# grep  -nC 3 '^ftp' passwd 
9-mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
10-operator:x:11:0:operator:/ROOT:/sbin/nologin
11-games:x:12:100:games:/usr/games:/sbin/nologin
12:ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin
13-nobody:x:99:99:Nobody:/:/sbin/nologin
14-systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin
15-dbus:x:81:81:System message bus:/:/sbin/nologin
[root@localhost tmp]# grep  -w 'hello' passwd   #按单词搜索
hello  world
[root@localhost tmp]# grep  'root' passwd 
root:x:0:0:ROOT:/root:/bin/bash
[root@localhost tmp]# grep  -o  'root' passwd   #打印匹配关键字
root
root
[root@localhost tmp]# cut  -d: -f1,7  passwd | head  #截取第1列和第7列，不是第一列到第7列
root:/bin/bash
bin:/sbin/nologin
daemon:/sbin/nologin
adm:/sbin/nologin
lp:/sbin/nologin
sync:/bin/sync
shutdown:/sbin/shutdown
halt:/sbin/halt
mail:/sbin/nologin
operator:/sbin/nologin
[root@localhost tmp]# cut -c1-5 passwd  #截取列前5个字符
root:
bin:x
daemo
adm:x
lp:x:
[root@localhost tmp]# cut -c10-  passwd  #截取列从第10个字符开始到最后
0:ROOT:/root:/bin/bash
:bin:/bin:/sbin/nologin
2:2:daemon:/sbin:/sbin/nologin
:adm:/var/adm:/sbin/nologin
[root@sige1 ~]# runlevel | cut -c3
5
[root@sige1 ~]# runlevel | cut -d ' ' -f2
5
[root@sige1 ~]# grep -v '^#' /etc/inittab | cut -d: -f2
5
[root@sige1 ~]# grep  '^id' /etc/inittab | cut -d: -f2
5
[root@sige1 ~]# grep "initdefault:$" /etc/inittab|cut -c4
5
[root@sige1 tmp]# sort -nr -t: -k3 1.txt    #-n以数字排序，r降序，-t分隔符  -k3第3列
uucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologin
mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
halt:x:7:0:halt:/sbin:/sbin/halt
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
sync:x:5:0:sync:/sbin:/bin/sync
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
bin:x:1:1:bin:/bin:/sbin/nologin
root:x:0:0:root:/root:/bin/bash

[root@sige1 tmp]# sort -nr -t: -k3 1.txt -o 2.txt   #把文件输出到2.txt文件里-o就是output
[root@sige1 tmp]# cat 2.txt
[root@sige1 tmp]# cat 3.txt
aaa
111
aaa
444
555
555
555
111
aaa
aaa
[root@sige1 tmp]# sort -u 3.txt   #-u去重复排序
111
444
555
aaa
[root@sige1 tmp]# sort -uR 3.txt  #R随机排序
[root@sige1 tmp]# uniq 3.txt      #去除连续的重复的行,不连续不去除
aaa
111
aaa
444
555
111
aaa
[root@sige1 tmp]# sort -u 3.txt  #去除所有重复的行,不管连不连续
111
444
555
aaa
[root@sige1 tmp]# uniq -c 3.txt  #统计重复行的个数
      1 aaa
      1 111
      1 aaa
      1 444
      3 555
      1 111
      2 aaa
[root@sige1 tmp]# uniq -d 3.txt  #只显示重复的行
555
aaa
[root@sige1 tmp]# uniq -cd 3.txt
      3 555
      2 aaa
[root@sige1 tmp]# echo hello world|tee 11.txt
hello world
[root@sige1 tmp]# cat 11.txt
hello world
[root@sige1 tmp]# echo 999|tee 11.txt    #tee屏幕上打印一份保存到文件里一份，后面覆盖前面
999
[root@sige1 tmp]# cat 11.txt
999
[root@sige1 tmp]# echo 888 |tee -a 11.txt  #-a追加
888
[root@sige1 tmp]# cat 11.txt
999
888
[root@sige1 vsftpd]# grep  -v '^#'  vsftpd.conf | grep  -v  '^$'|tee vsftp.conf.bak
[root@sige1 vsftpd]# cat  vsftp.conf.bak 
anonymous_enable=YES
local_enable=YES
write_enable=YES
local_umask=022
dirmessage_enable=YES
xferlog_enable=YES
connect_from_port_20=YES
xferlog_std_format=YES
listen=YES
pam_service_name=vsftpd
userlist_enable=YES
tcp_wrappers=YES
[root@sige1 vsftpd]# tail  -1  /etc/bashrc
alias grep='grep --color=auto'
[root@sige1 vsftpd]# source  /etc/bashrc
[root@sige1 tmp]# cat  file1
aaaa
111
hello world
222
333
bbb
[root@sige1 tmp]# cat  file2
aaa
hello
111
222
bbb
333
world
[root@sige1 tmp]# cat -n  file1
     1	aaaa
     2	111
     3	hello world
     4	222
     5	333
     6	bbb
[root@sige1 tmp]# cat -n  file2
     1	aaa
     2	hello
     3	111
     4	222
     5	bbb
     6	333
     7	world
[root@sige1 tmp]# diff  file1 file2
1c1,2
< aaaa
---
> aaa
> hello
3d3
< hello world
5d4
< 333
6a6,7
> 333
> world
[root@sige1 tmp]# diff -c  file1 file2
*** file1	2019-09-14 23:51:04.498485266 +0800
--- file2	2019-09-14 23:51:37.160485346 +0800
***************
*** 1,6 ****
! aaaa
  111
- hello world
  222
- 333
  bbb
--- 1,7 ----
! aaa
! hello
  111
  222
  bbb
+ 333
+ world
[root@sige1 tmp]# >file1   #清空file1文件里的内容
[root@sige1 tmp]# diff  -u  file1 file2
--- file1	2019-09-15 00:04:47.016485030 +0800
+++ file2	2019-09-14 23:51:37.160485346 +0800
@@ -1,7 +1,7 @@
-aaaa
+aaa
+hello
 111
-hello world
 222
-333
 bbb
-
+333
+world
[root@sige1 tmp]# ll  -R  dir*
dir1:
总用量 0
-rw-r--r-- 1 root root 0 9月  15 21:31 file1
-rw-r--r-- 1 root root 0 9月  15 21:31 file2
-rw-r--r-- 1 root root 0 9月  15 21:31 file3
-rw-r--r-- 1 root root 0 9月  15 21:31 file4
-rw-r--r-- 1 root root 0 9月  15 21:31 file5

dir2:
总用量 0
-rw-r--r-- 1 root root 0 9月  15 21:32 file1
-rw-r--r-- 1 root root 0 9月  15 21:32 file2
-rw-r--r-- 1 root root 0 9月  15 21:32 file3
-rw-r--r-- 1 root root 0 9月  15 21:32 test1
-rw-r--r-- 1 root root 0 9月  15 21:32 test2
[root@sige1 tmp]# diff  -q  dir1 dir2
Only in dir1: file4
Only in dir1: file5
Only in dir2: test1
Only in dir2: test2
[root@sige1 tmp]# diff  -u  file1 file2 > file.patch
[root@sige1 tmp]# cat  file.patch 
--- file1	2019-09-15 00:04:47.016485030 +0800
+++ file2	2019-09-14 23:51:37.160485346 +0800
@@ -1,7 +1,7 @@
-aaaa
+aaa
+hello
 111
-hello world
 222
-333
 bbb
-
+333
+world
[root@sige1 tmp]# patch file1 file.patch 
patching file file1
[root@sige1 tmp]# diff  file1 file2
[root@sige1 tmp]# cat  file1 
aaa
hello
111
222
bbb
333
world
[root@sige1 tmp]# cat  file2
aaa
hello
111
222
bbb
333
world
[root@sige1 tmp]# >file1
[root@sige1 tmp]# >file2
[root@sige1 tmp]# vim  file1
[root@sige1 tmp]# vim  file2
[root@sige1 tmp]# cat -n file1
     1	hello world
     2	8888
[root@sige1 tmp]# cat -n file2
     1	heima itcast
     2	999
     3	oooo
[root@sige1 tmp]# paste file1 file2 
hello world	heima itcast
8888	999
	oooo
[root@sige1 tmp]# cat -n file2
     1	heima itcast
     2	999
     3	oooo
[root@sige1 tmp]# paste -d: file1 file2 
hello world:heima itcast
8888:999
:oooo
[root@sige1 tmp]# paste  file1 file2
hello world	heima itcast
8888	999
	oooo
[root@sige1 tmp]# paste -s  file1 file2
hello world	8888
heima itcast	999	oooo
[root@sige1 tmp]# cat  file1  file2
hello world
8888
heima itcast
999
oooo
[root@sige1 tmp]# paste  file1 file2
hello world	heima itcast
8888	999
	oooo

vim  passwd 
:set  list 
[root@sige1 tmp]# tr 'a-z' 'A-Z' < 1.txt
ROOT:X:0:0:ROOT:/ROOT:/BIN/BASH
BIN:X:1:1:BIN:/BIN:/SBIN/NOLOGIN
DAEMON:X:2:2:DAEMON:/SBIN:/SBIN/NOLOGIN
ADM:X:3:4:ADM:/VAR/ADM:/SBIN/NOLOGIN
LP:X:4:7:LP:/VAR/SPOOL/LPD:/SBIN/NOLOGIN
SYNC:X:5:0:SYNC:/SBIN:/BIN/SYNC
SHUTDOWN:X:6:0:SHUTDOWN:/SBIN:/SBIN/SHUTDOWN
HALT:X:7:0:HALT:/SBIN:/SBIN/HALT
MAIL:X:8:12:MAIL:/VAR/SPOOL/MAIL:/SBIN/NOLOGIN
UUCP:X:10:14:UUCP:/VAR/SPOOL/UUCP:/SBIN/NOLOGIN
[root@sige1 tmp]# cat  1.txt
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
sync:x:5:0:sync:/sbin:/bin/sync
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
halt:x:7:0:halt:/sbin:/sbin/halt
mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
uucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologin
[root@sige1 tmp]# tr  '0-9' '@' < 1.txt
[root@sige1 tmp]# tr  -d  'a-z' < 1.txt
::0:0::/://
::1:1::/://
::2:2::/://
::3:4:://://
::4:7::///://
::5:0::/://
::6:0::/://
::7:0::/://
::8:12::///://
::10:14::///://
[root@sige1 tmp]# tr -d ':/ 0-9 ,' < 1.txt
rootxrootrootbinbash
binxbinbinsbinnologin
daemonxdaemonsbinsbinnologin
admxadmvaradmsbinnologin
lpxlpvarspoollpdsbinnologin
syncxsyncsbinbinsync
shutdownxshutdownsbinsbinshutdown
haltxhaltsbinsbinhalt
mailxmailvarspoolmailsbinnologin
uucpxuucpvarspooluucpsbinnologin
[root@sige1 tmp]# tr -d '[:/ 0-9 ,]' < 1.txt
[root@sige1 tmp]# cat  1.txt
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
dae,mon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
sync:x:5:0:sync:/sbin:/bin/sync
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
halt:x:7:0:halt:/sbin:/sbin/halt
mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
uucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologin
aaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbcccccccccccccc
abcabcabc
[root@sige1 tmp]# tr -s 'a-z' < 1.txt
rot:x:0:0:rot:/rot:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
dae,mon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spol/lpd:/sbin/nologin
sync:x:5:0:sync:/sbin:/bin/sync
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
halt:x:7:0:halt:/sbin:/sbin/halt
mail:x:8:12:mail:/var/spol/mail:/sbin/nologin
ucp:x:10:14:ucp:/var/spol/ucp:/sbin/nologin
abc
abcabcabc
[root@sige1 tmp]# ifconfig eth0 | grep 'Bcast' | cut -d: -f2|tr -d 'a-zA-Z '
192.168.239.164
[root@sige1 tmp]# ifconfig eth0 | grep 'Bcast' | cut -d: -f2|cut -d' ' -f1
192.168.239.164
[root@sige1 tmp]# ifconfig eth0 | grep 'Bcast'|tr -d 'a-zA-Z:'
           192.168.239.164  192.168.239.255  255.255.255.0
[root@sige1 tmp]# ifconfig eth0 | grep 'Bcast'|tr -d 'a-zA-Z:'|tr ' ' '\n'|grep -v '^$'
192.168.239.164
192.168.239.255
255.255.255.0
[root@sige1 tmp]# ifconfig eth0 | grep 'HW'| tr -s ' '
eth0 Link encap:Ethernet HWaddr 00:0C:29:CA:40:D9 
[root@sige1 tmp]# ifconfig eth0 | grep 'HW'| tr -s ' '|cut -d' ' -f5
00:0C:29:CA:40:D9
[root@sige1 tmp]# grep 'bash$' passwd
root:x:0:0:root:/root:/bin/bash
gongli:x:500:500::/home/gongli:/bin/bash
[root@sige1 tmp]# grep 'bash$' passwd | grep -v 'root'
gongli:x:500:500::/home/gongli:/bin/bash
[root@sige1 tmp]# grep 'bash$' passwd | grep -v 'root'|cut -d: -f1,2,7
gongli:x:/bin/bash
[root@sige1 tmp]# grep 'bash$' passwd | grep -v 'root'|cut -d: -f1,2,7|tr ':' '\t'
gongli	x	/bin/bash
[root@sige1 tmp]# grep 'bash$' passwd | grep -v 'root'|cut -d: -f1,2,7|tr ':' '\t'|tee abc.txt
gongli	x	/bin/bash
[root@sige1 tmp]# cat  abc.txt 
gongli	x	/bin/bash
<<<<<<< HEAD
$ date +%F
2019-09-26
$ echo "$(date +%F)"
2019-09-26
$ echo '$(date +%F)'
$(date +%F)
$ echo "`date +%F`"
2019-09-26
$ echo  $(echo "`date +%F`")
2019-09-26
``=$()
$ cat  shift.sh
#!/bin/bash
sum=0
while[ $# -ne 0 ]
do
let sum=$sum+$1
shift 2
done
echo sum=$sum



=======
sige@sige1:~/shell$ echo "1 2 3 4 5"|awk -v istor=100 '{if(istor==100){print $0}}'
1 2 3 4 5
sige@sige1:~/shell$ echo 'a b c d'|awk '{print $0}'
a b c d
sige@sige1:~/shell$ echo 'a b c d'|awk '{print $1}'
a
sige@sige1:~/shell$ echo 'a b c d'|awk '{print NF}'
4
sige@sige1:~/shell$ echo 'a b c d'|awk '{print $NF}'
d
sige@sige1:~/shell$ echo 'a b c d'|awk '{print $(NF-1)}'
c
sige@sige1:~/shell$ array=(bill   chen  bai   hu);
sige@sige1:~/shell$ echo ${#array[@]}
4
sige@sige1:~/shell$ echo ${array[*]}
bill chen bai hu
sige@sige1:~/shell$ str="hello"
sige@sige1:~/shell$ echo  ${#str}
5
sige@sige1:~/shell$ cat  num.txt
11
22
33
44
55
66
sige@sige1:~/shell$ sed  -e 's/11/22/;s/33/99/g' num.txt
22
22
99
44
55
66
[root@docker-git-harbor ~]# date +%F
2019-11-01
[root@docker-git-harbor ~]# echo  "hello world"
hello world
[root@docker-git-harbor ~]# echo  'hello world'
hello world
[root@docker-git-harbor ~]# echo "$(date +%F)"
2019-11-01
[root@docker-git-harbor ~]# echo '$(date +%F)'
$(date +%F)
[root@docker-git-harbor ~]# echo "$(date +%F)"
2019-11-01
[root@docker-git-harbor ~]# echo "`date +%F`"
2019-11-01
[root@docker-git-harbor ~]# echo $(echo "`date +%F`")
2019-11-01
bash -x  first_shell.sh 
bash -n first_shell.sh  //检测语法有没有问题
source  first_shell.sh 
[root@docker-git-harbor ~]# date +'%F %T'
2019-11-01 09:49:12
[root@docker-git-harbor ~]# echo "我$(date +'%F %T')"
我2019-11-01 09:49:38
[root@docker-git-harbor ~]# A=hello
[root@docker-git-harbor ~]# echo $A
hello
[root@docker-git-harbor ~]# echo ${A}
hello
[root@docker-git-harbor ~]# A=world
[root@docker-git-harbor ~]# echo $A
world
[root@docker-git-harbor ~]# unset A
[root@docker-git-harbor ~]# echo $A

[root@docker-git-harbor ~]# A="hello world"
[root@docker-git-harbor ~]# echo $A
hello world
[root@docker-git-harbor ~]# A='hello world'
[root@docker-git-harbor ~]# echo $A
hello world
[root@docker-git-harbor ~]# _A=hello
[root@docker-git-harbor ~]# echo $_A
hello
[root@docker-git-harbor ~]# echo ${_A}
hello
[root@docker-git-harbor ~]# A =123
bash: A: command not found...
[root@docker-git-harbor ~]# A= 123
bash: 123: command not found...
[root@docker-git-harbor ~]# A = 123
bash: A: command not found...
[root@docker-git-harbor ~]# A=123456
[root@docker-git-harbor ~]# echo $A
123456
[root@docker-git-harbor ~]# echo ${A}
123456
[root@docker-git-harbor ~]# echo ${A:2:3}
345
[root@docker-git-harbor ~]# hostname
docker-git-harbor
[root@docker-git-harbor ~]# A=`hostname`
[root@docker-git-harbor ~]# echo $A
docker-git-harbor
[root@docker-git-harbor ~]# cat /etc/redhat-release 
CentOS Linux release 7.4.1708 (Core) 
[root@docker-git-harbor ~]# uname -r
3.10.0-693.el7.x86_64
[root@docker-git-harbor ~]# B=$(uname -r)
[root@docker-git-harbor ~]# echo $B
3.10.0-693.el7.x86_64
[root@docker-git-harbor ~]# read name
harry
[root@docker-git-harbor ~]# echo $name
harry
[root@docker-git-harbor ~]# read -p "Input your name:" name
Input your name:jack
[root@docker-git-harbor ~]# echo $name
jack
[root@docker-git-harbor ~]# read -s -p "Input your password:" pass
Input your password:[root@docker-git-harbor ~]# 
[root@docker-git-harbor ~]# echo $pass
123456
[root@docker-git-harbor ~]# read -n 5 -p "Input your name:" name
Input your name:harry[root@docker-git-harbor ~]# 
[root@docker-git-harbor ~]# read -n 5 -p "Input your name:" name
Input your name:jack
[root@docker-git-harbor ~]# read -t 3 -p "name:" name
name:1111[root@docker-git-harbor ~]# 
[root@docker-git-harbor ~]# echo $name

[root@docker-git-harbor ~]# read -t 3 -p "name:" name
name:344
[root@docker-git-harbor ~]# echo $name
344
[root@docker-git-harbor ~]# vim ip.txt
[root@docker-git-harbor ~]# read -p "请输入IP地址:" IP MASK <ip.txt
[root@docker-git-harbor ~]# echo $IP
10.1.1.1
[root@docker-git-harbor ~]# echo $MASK
255.255.255.0
[root@docker-git-harbor ~]# cat ip.txt
10.1.1.1  255.255.255.0
[root@docker-git-harbor ~]# 
[root@docker-git-harbor ~]# A=123
[root@docker-git-harbor ~]# echo $A
123
[root@docker-git-harbor ~]# A=hello
[root@docker-git-harbor ~]# echo $A
hello
[root@docker-git-harbor ~]# declare -i A=123  //定义整数变量
[root@docker-git-harbor ~]# echo $A
123
[root@docker-git-harbor ~]# A=hello
[root@docker-git-harbor ~]# echo $A
0
[root@docker-git-harbor ~]# A=333
[root@docker-git-harbor ~]# echo $A
333
[root@docker-git-harbor ~]# declare -r B=hello  //定义只读变量
[root@docker-git-harbor ~]# echo $B
hello
[root@docker-git-harbor ~]# B=8888
-bash: B: readonly variable
[root@docker-git-harbor ~]# unset B
-bash: unset: B: cannot unset: readonly variable
[root@docker-git-harbor ~]# exit  //退出去B就可以用了
[root@docker-git-harbor ~]# AAAA=heima
[root@docker-git-harbor ~]# env|grep AAAA
[root@docker-git-harbor ~]# export AAAA
[root@docker-git-harbor ~]# env|grep AAAA
AAAA=heima
[root@docker-git-harbor ~]# declare -x BBBB=itcast  //定义环境变量
[root@docker-git-harbor ~]# env|grep BBBB
BBBB=itcast
[root@docker-git-harbor ~]# set|grep A  //查看本地变量
[root@docker-git-harbor ~]# declare -x BBB=heima
[root@docker-git-harbor ~]# CCC=itcast
[root@docker-git-harbor ~]# export CCC
[root@docker-git-harbor ~]# env|grep BBB
BBBB=itcast
BBB=heima
[root@docker-git-harbor ~]# env|grep CCC
CCC=itcast
[root@docker-git-harbor ~]# export DDD=7777
[root@docker-git-harbor ~]# env|grep DDD
DDD=7777
[root@docker-git-harbor ~]# ps
   PID TTY          TIME CMD
  1983 pts/1    00:00:00 bash
  3981 pts/1    00:00:00 ps
[root@docker-git-harbor ~]# echo $?
0
[root@docker-git-harbor shell02]# cat variable.sh 
#!/bin/env bash 
# Name:variable.sh
# ......

echo "\$0 = $0"
echo "\$# = $#"
echo "\$* = $*"
echo "\$@ = $@"
echo "\$1 = $1"
echo "\$2 = $2"
echo "\$3 = $3"
echo "\$10 = ${10}"
echo "系统变量就是这样，你懂了吗？"
[root@docker-git-harbor shell02]# ./variable.sh 1 2 3 4 5 6 7 8 9 10
$0 = ./variable.sh
$# = 10
$* = 1 2 3 4 5 6 7 8 9 10
$@ = 1 2 3 4 5 6 7 8 9 10
$1 = 1
$2 = 2
$3 = 3
$10 = 10
系统变量就是这样，你懂了吗？
[root@docker-git-harbor shell02]# ps
   PID TTY          TIME CMD
  7375 pts/6    00:00:00 bash
  7423 pts/6    00:00:00 ps
[root@docker-git-harbor shell02]# echo $$
7375
[root@docker-git-harbor shell02]# sleep 500 &
[1] 7457
[root@docker-git-harbor shell02]# sleep 600 &
[2] 7459
[root@docker-git-harbor shell02]# ps -ef | grep sleep
root       7457   7375  0 05:45 pts/6    00:00:00 sleep 500
root       7459   7375  0 05:46 pts/6    00:00:00 sleep 600
root       7469    630  0 05:46 ?        00:00:00 sleep 60
root       7471   7375  0 05:46 pts/6    00:00:00 grep --color=auto sleep
[root@docker-git-harbor shell02]# echo $!
7459
[root@docker-git-harbor shell02]# ls -l
total 4
-rwxr-xr-x 1 root root 235 Nov  2 05:38 variable.sh
[root@docker-git-harbor shell02]# echo !$
echo -l
-l
[root@docker-git-harbor shell02]# echo $((1+1))
2
[root@docker-git-harbor shell02]# echo $((10-5))
5
[root@docker-git-harbor shell02]# echo $[85*74]
6290
[root@docker-git-harbor shell02]# echo $[10/8]
1
[root@docker-git-harbor shell02]# echo $[10%8]
2
[root@docker-git-harbor shell02]# echo $[8/10]
0
[root@docker-git-harbor shell02]# echo $[8%10]
8
[root@docker-git-harbor shell02]# echo $[5%10]
5
[root@docker-git-harbor shell02]# echo $[10%7]
3
[root@docker-git-harbor shell02]# expr 1 + 1
2
[root@docker-git-harbor shell02]# expr 1+1  //必须加空格
1+1
[root@docker-git-harbor shell02]# expr 10 - 5
5
[root@docker-git-harbor shell02]# expr 10 * 5
expr: syntax error
[root@docker-git-harbor shell02]# expr 10 \* 5
50
[root@docker-git-harbor shell02]# expr 10  /  5
2
[root@docker-git-harbor shell02]# expr 10  %  5
0
[root@docker-git-harbor shell02]# expr 5  %  5
0
[root@docker-git-harbor shell02]# n=1;let n=n+1;echo $n
2
[root@docker-git-harbor shell02]# let n+=2
[root@docker-git-harbor shell02]# echo $n
4
[root@docker-git-harbor shell02]# let n-=2
[root@docker-git-harbor shell02]# echo $n
2
[root@docker-git-harbor shell02]# let n=n*2
[root@docker-git-harbor shell02]# echo $n
4
[root@docker-git-harbor shell02]# let n*=2
[root@docker-git-harbor shell02]# echo $n
8
[root@docker-git-harbor shell02]# let n/=2
[root@docker-git-harbor shell02]# echo $n
4
[root@docker-git-harbor shell02]# let n/=2
[root@docker-git-harbor shell02]# echo $n
2
[root@docker-git-harbor shell02]# let n=n**3
[root@docker-git-harbor shell02]# echo $n
8
[root@docker-git-harbor shell02]# let n=n**3
[root@docker-git-harbor shell02]# echo $n
512
[root@docker-git-harbor shell02]# echo $[1+1.5]
-bash: 1+1.5: syntax error: invalid arithmetic operator (error token is ".5")
[root@docker-git-harbor shell02]# echo 1+1.5|bc
2.5
[root@docker-git-harbor shell02]# bc
bc 1.06.95
Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006 Free Software Foundation, Inc.
This is free software with ABSOLUTELY NO WARRANTY.
For details type `warranty'. 
1+4.5
5.5
quit
[root@docker-git-harbor shell02]# bc
bc 1.06.95
Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006 Free Software Foundation, Inc.
This is free software with ABSOLUTELY NO WARRANTY.
For details type `warranty'. 
2^7
128
2**7
(standard_in) 2: syntax error
quit
[root@docker-git-harbor shell02]# i=1;let i++;echo $i
2
[root@docker-git-harbor shell02]# j=1;let ++j;echo $j
2
[root@docker-git-harbor shell02]# unset i j
[root@docker-git-harbor shell02]# echo $i

[root@docker-git-harbor shell02]# echo $j

[root@docker-git-harbor shell02]# i=1;j=1
[root@docker-git-harbor shell02]# let x=i++
[root@docker-git-harbor shell02]# echo $x
1
[root@docker-git-harbor shell02]# let y=++j
[root@docker-git-harbor shell02]# echo $y
2
[root@docker-git-harbor shell02]# man test
[root@docker-git-harbor shell02]# ll
total 4
-rwxr-xr-x 1 root root 235 Nov  2 05:38 variable.sh
[root@docker-git-harbor shell02]# touch file1
[root@docker-git-harbor shell02]# echo hello > file2
[root@docker-git-harbor shell02]# ll
total 8
-rw-r--r-- 1 root root   0 Nov  2 06:34 file1
-rw-r--r-- 1 root root   6 Nov  2 06:34 file2
-rwxr-xr-x 1 root root 235 Nov  2 05:38 variable.sh
[root@docker-git-harbor shell02]# mkdir dir1
[root@docker-git-harbor shell02]# test -e ./file1
[root@docker-git-harbor shell02]# echo $?
0
[root@docker-git-harbor shell02]# test -e ./test1
[root@docker-git-harbor shell02]# echo $?
1
[root@docker-git-harbor shell02]# [ -d ./dir1 ];echo $?
0
[root@docker-git-harbor shell02]# ls
dir1  file1  file2  variable.sh
[root@docker-git-harbor shell02]# [ -d ./file1 ];echo $?
1
[root@docker-git-harbor shell02]# ln -s file1 test1
[root@docker-git-harbor shell02]# [ -L ./test1 ];echo $?
0
[root@docker-git-harbor shell02]# rm -rf file1
[root@docker-git-harbor shell02]# [ -L ./test1 ];echo $?
0
[root@docker-git-harbor shell02]# [[ -f ./file2 ]];echo $?
0
[root@docker-git-harbor shell02]# [[ -f ./test1 ]];echo $?
1
ps -aux | grep sleep| awk '{print $2}' | xargs kill
if [ condition ];then 
     command
     command
fi

if  test 条件;then 
     命令
fi 

if [[ 条件 ]];then
    命令
fi 

[ 条件 ] && command

if [ condition ];then
      command1
else
      command2
fi 

[ 条件 ] && command1 || command2

sige@sige1:~/shell$ cat  if1.sh
#!/bin/env bash 
# ......

if [ "$1" = "hello" ];then
      echo  world
   else 
      echo  hello
fi

sige@sige1:~/shell$ cat  if2.sh
#!/bin/env  bash 

read  -p '请输入一个字符串:' str 
if [ "$str" = 'hello' ];then
     echo  'world'
   else 
     echo '请输入hello!'
fi

#!/bin/env bash 

A=hello
B=world
C=hello

if [ "$1" = "$A" ];then 
      echo  "$B"
else
      echo  "$C"
fi 

read -p '请输入一个字符串:' str;
[ "$str" = 'hello' ] && echo 'world' || echo '请输入hello!'

if [ condition1 ];then 
      command1  
elif [ condition2 ];then 
      command2
else
      command3
fi 

#!/bin/env  bash 
#.....

if [ 1 -eq 2  ];then 
     echo  1
elif [ 0 -ne 2  ];then 
     echo  2
elif [ 0 -ne 2 ];then 
     echo 999
elif [ 0 -ne 2 ];then 
     echo 888
else
     echo 3
fi 


#!/bin/env  bash 
#该脚本用于判断当前主机是否和远程指定主机互通

read  -p "请输入你要ping的主机的IP:" ip
ping -c1 $ip &>/dev/null
if [ $? -eq 0 ];then
  echo "当前主机和远程主机$ip是互通的"
else 
  echo "当前主机和远程主机$ip不通的"
fi

<<<<<<< HEAD
sige@sige1:~$ for i in {1..100..2};do echo $i;done
sige@sige1:~$ for i in $(seq 10);do echo $i;done
sige@sige1:~$ for i in {10..1};do echo $i;done
10
9
8
7
6
5
4
3
2
1
sige@sige1:~$ seq 10 -1 1
10
9
8
7
6
5
4
3
2
1
sige@sige1:~$ cat  for3.sh 
#!/bin/env bash 
for i 
do 
echo $@ 
done
sige@sige1:~$ sh   for3.sh  a  b c
a b c
a b c
a b c
=======
pgrep httpd
ps aux|grep httpd|grep -v  'grep'

#!/bin/env bash 
#判断一个程序(httpd)的进程是否存在
pgrep httpd &>/dev/null
if [ $? -ne 0 ];then 
     echo "当前httpd进程不存在"
else 
     echo "当前httpd进程存在"
fi
或者
test $? -eq 0 &&  echo "当前httpd进程存在" || echo "当前httpd进程不存在"

#!/bin/env bash 
# 判断门户网站是否能够正常提供服务
#定义变量
web_server=www.baidu.com 
#访问网站
wget -P /tmp $web_server &>/dev/null
[ $? -eq 0 ] && echo "当前网站服务是ok" && rm -f /tmp/index.* || echo "当前网站服务不ok,请立刻处理"


>>>>>>> cea3b4c6438f65eceba1c23191388aaeab411d98

sige@sige1:~$ for ((i=1;i<=5;i++));do echo $i;done
1
2
3
4
5
sige@sige1:~$ for ((i=1;i<=5;i+=2));do echo $i;done
1
3
5
sige@sige1:~$ for ((i=2;i<=10;i+=2));do echo $i;done
2
4
6
8
10
 grep  -Ev  "^#"   ubuntu-server.seed |grep -Ev  "^$|^ +$" 
 
 if [ "$(uname -r | cut -c 12-14)" = "el6" ];then
	filesystem=ext4
	elif [ "$(uname -r | cut -c 12-14)" = "el7" ];then
	filesystem=xfs
	else
	logging 'The current system software pack is missing.' 
fi
Part_Size="$1 $3 $5 $7"
Monit_Point="$2 $4 $6 $8"

echo ${Part_Size}
echo ${Monit_Point}

 
 function check_execution_result(){
        if [[ ! -z $RETVAL ]];then
                unset RETVAL
        fi
        RETVAL=$?
        if [[ $RETVAL -ne 0 ]];then
                echo execution failed! 
                exit $RETVAL
        else
                echo execution successfully! 
        fi
        unset RETVAL
}

ONLINE_SCSI_DISK_NEWADD=$(lsblk | grep disk | grep -v fd | awk '{print $1}' |grep -v da| xargs echo | sed "s/$ONLINE_SCSI_DISK_PRESENT//g")

for BLOCK in $ONLINE_SCSI_DISK_NEWADD; do
    ONLINE_SCSI_DISK_NEWADD_FILENAME="/dev/"$BLOCK
    # end-of-file contents and eof mark must start row1
    fdisk $ONLINE_SCSI_DISK_NEWADD_FILENAME >/dev/null 2>&1<<eof
n
p
1
 
 
 
t
8e
w
eof

for i in ${Part_Size}; do
    Lv_Size=$i
    
    for m in ${Monit_Point}; do
        Name=`echo $m | awk -F '/' {'print $NF'}`
        if [[ ! -n ${Name} ]];then Name='root';fi
        Mount_Path=$m        
        Create_LV 0
        Monit_Point=`echo ${Monit_Point} | awk {'print $2,$3,$4'}`
        break
    done
done

#! /usr/bin/env sh
# $1: root_dir 		软件包目录
# $2: file_url 		软件包下载url
# $3: user	 	    管理用户
# $4: password		管理用户密码
# $5: node1_ip 		节点1的ip地址
# $6: node1_pass 	节点1的登陆密码
# $7: node2_ip 		节点2的ip地址
# $8: node2_pass	节点2的登陆密码
# $9: hostname1     节点1的主机名
# rpm install
# need Advance install openssh-clients
function logging(){
	local_date=$(date +"%H:%M:%S")
	logger -t $0 $1
	echo "[ $USER $local_date ]: $1" | tee -a ${log_path}
}

# 初始化文件下载方法
function download(){
	logging "Downloading the file from $url ."
	rm -f $root_dir/$file_name
	curl -k -o ${root_dir}/${file_name} ${file_url}/${file_name} &>>${log_path}
	if [[ ! -f $root_dir/$file_name ]];then
		logging "Download was failed from $url ."
		exit 400
	fi
}

root_dir=/opt
log_path=/var/log/rabbitmq_install.log
user=admin
password=pssword

if [ "$(uname -r | cut -c 12-14)" = "el6" ];then
	file_name=rabbitmq315_el6.tar.gz
	file_url=http://192.168.61.30/software/rabbitmq/
elif [ "$(uname -r | cut -c 12-14)" = "el7" ];then
        file_name=rabbitmq381_el7.tar.gz
	file_url=http://192.168.61.30/software/rabbitmq/
elif [ "$(awk  -F " "  '{print $4}' /etc/redhat-release)" = "7.8.2003" ];then 
        file_name=rabbitmq335_el7.tar.gz
	file_url=http://192.168.61.30/software/rabbitmq/
else
	logging 'The rabbitmq package is missing.' 
fi

if [[ -n $1 ]];then
  root_dir=$1
fi

if [[ -n $2 ]];then
  file_url=$2
fi

if [[ -n $3 ]];then
  user=$3
fi

if [[ -n $4 ]];then
  password=$4
fi

if [[ ! -n $5 ]];then
  exit
fi
node1_ip=$5

if [[ ! -n $6 ]];then
  exit
fi
node1_pass=$6

if [[ ! -n $7 ]];then
  exit
fi
node2_ip=$7

if [[ ! -n $8 ]];then
  exit
fi
node2_pass=$8

if [[ ! -n $9 ]];then
  exit
fi
hostname1=$9

IP=`/sbin/ip add | grep 'inet '| grep -v '127.0.0.1' | cut -d/ -f1 | awk '{ print $2}' | head -n1`

pack_dir=$(tar tf ${root_dir}/${file_name} |head -1)


if [ "$(uname -r | cut -c 12-14)" = "el6" ];then
     service   iptables  stop  &>>${log_path}
     chkconfig   iptables  off &>>${log_path}
     sshpass -p"${node1_pass}" ssh -o stricthostkeychecking=no root@${node1_ip} "service   iptables  stop && chkconfig   iptables  off" &>>${log_path}
     sshpass -p"${node2_pass}" ssh -o stricthostkeychecking=no root@${node2_ip} "service   iptables  stop && chkconfig   iptables  off" &>>${log_path}
else
     systemctl stop firewalld &>>${log_path}
     systemctl disable firewalld &>>${log_path}
     sshpass -p"${node1_pass}" ssh -o stricthostkeychecking=no root@${node1_ip} "systemctl stop firewalld && systemctl disable firewalld" &>>${log_path}
     sshpass -p"${node2_pass}" ssh -o stricthostkeychecking=no root@${node2_ip} "systemctl stop firewalld && systemctl disable firewalld" &>>${log_path}
fi

logging "Completed, next startup rabbitmq service ..."
if [ "$(uname -r | cut -c 12-14)" = "el6" ];then
     /usr/lib/rabbitmq/bin/rabbitmq-plugins  enable   rabbitmq_management  &>>${log_path}
	 sleep 3
	 rabbitmq-server -detached &>>${log_path}
	 chkconfig rabbitmq-server on &>/dev/null
	 sshpass -p"${node1_pass}" ssh -o stricthostkeychecking=no root@${node1_ip} "/usr/lib/rabbitmq/bin/rabbitmq-plugins  enable   rabbitmq_management" &>>${log_path}
	 sleep 3
	 sshpass -p"${node1_pass}" ssh -o stricthostkeychecking=no root@${node1_ip} "rabbitmq-server -detached" &>>${log_path}
	 sshpass -p"${node1_pass}" ssh -o stricthostkeychecking=no root@${node1_ip} "chkconfig rabbitmq-server on" &>>${log_path}
	 sshpass -p"${node1_pass}" ssh -o stricthostkeychecking=no root@${node1_ip} "ps -ef | grep rabbitmq | grep -v grep | awk '{print \$2}' | xargs kill -9" &>>${log_path}
	 sshpass -p"${node2_pass}" ssh -o stricthostkeychecking=no root@${node2_ip} "/usr/lib/rabbitmq/bin/rabbitmq-plugins  enable   rabbitmq_management" &>>${log_path}
	 sleep 3
	 sshpass -p"${node2_pass}" ssh -o stricthostkeychecking=no root@${node2_ip} "rabbitmq-server -detached" &>>${log_path}
	 sshpass -p"${node2_pass}" ssh -o stricthostkeychecking=no root@${node2_ip} "chkconfig rabbitmq-server on" &>>${log_path}
	 sshpass -p"${node2_pass}" ssh -o stricthostkeychecking=no root@${node2_ip} "ps -ef | grep rabbitmq | grep -v grep | awk '{print \$2}' | xargs kill -9" &>>${log_path} 
	 sshpass -p"${node1_pass}" scp -rp -o stricthostkeychecking=no /var/lib/rabbitmq/.erlang.cookie root@${node1_ip}:/var/lib/rabbitmq/.erlang.cookie
     sshpass -p"${node2_pass}" scp -rp -o stricthostkeychecking=no /var/lib/rabbitmq/.erlang.cookie root@${node2_ip}:/var/lib/rabbitmq/.erlang.cookie
     if [[ ! $? -eq 0 ]];then
          logging "send cookie failed,pls checkout ${log_path} ..."
          exit
     fi
	 sshpass -p"${node1_pass}" ssh -o stricthostkeychecking=no root@${node1_ip} "rabbitmq-server -detached" &>>${log_path}
	 sshpass -p"${node2_pass}" ssh -o stricthostkeychecking=no root@${node2_ip}  "rabbitmq-server -detached" &>>${log_path}
else 
	rabbitmq-plugins enable rabbitmq_management  &>>${log_path}
	sshpass -p"${node1_pass}" ssh -o stricthostkeychecking=no root@${node1_ip} "rabbitmq-plugins enable rabbitmq_management" &>>${log_path}
	sshpass -p"${node2_pass}" ssh -o stricthostkeychecking=no root@${node2_ip} "rabbitmq-plugins enable rabbitmq_management" &>>${log_path}
	sleep 3
	service  rabbitmq-server  start &>>${log_path}
    if [ $? -eq  0 ];then
         chkconfig rabbitmq-server on &>/dev/null
         systemctl enable rabbitmq-server &>/dev/null
         logging "service startup completion!"
    else
         service rabbitmq-server status &>>${log_path}
         logging "Service startup failed, pls checkout ${log_path} ."
         exit
    fi
	sshpass -p"${node1_pass}" ssh -o stricthostkeychecking=no root@${node1_ip} "service rabbitmq-server start" &>>${log_path}
    sshpass -p"${node2_pass}" ssh -o stricthostkeychecking=no root@${node2_ip} "service rabbitmq-server start" &>>${log_path}
    if [[ ! $? -eq 0 ]];then
        logging "cluster start failed,pls checkout ${log_path} ..."
        exit
    fi
	sshpass -p"${node1_pass}" ssh -o stricthostkeychecking=no root@${node1_ip} "service rabbitmq-server stop" &>>${log_path}
    sshpass -p"${node2_pass}" ssh -o stricthostkeychecking=no root@${node2_ip} "service rabbitmq-server stop" &>>${log_path}
	sshpass -p"${node1_pass}" scp -rp -o stricthostkeychecking=no /var/lib/rabbitmq/.erlang.cookie root@${node1_ip}:/var/lib/rabbitmq/.erlang.cookie
    sshpass -p"${node2_pass}" scp -rp -o stricthostkeychecking=no /var/lib/rabbitmq/.erlang.cookie root@${node2_ip}:/var/lib/rabbitmq/.erlang.cookie
    if [[ ! $? -eq 0 ]];then
         logging "send cookie failed,pls checkout ${log_path} ..."
         exit
    fi
	sshpass -p"${node1_pass}" ssh -o stricthostkeychecking=no root@${node1_ip} "service rabbitmq-server start" &>>${log_path}
    sshpass -p"${node2_pass}" ssh -o stricthostkeychecking=no root@${node2_ip} "service rabbitmq-server start" &>>${log_path}
fi 

logging "####################################"
logging "url: http://${IP}:15672"
logging "Username: admin"
logging "Password: ${password} "
logging "####################################"
echo 0

##########################
# 接受用户变量
##########################

if [[ -n $1 ]];then username=$1;fi
if [[ -n $2 ]];then password=$2;fi
if [[ -n $3 ]];then gdbname=$3;fi
if [[ -n $4 ]];then oracle_sid=$4;fi
if [[ -n $5 ]];then oracle_sid_standby=$5;fi
if [[ -n $6 ]];then master=$6;fi
if [[ -n $7 ]];then standby=$7;fi
if [[ -n $8 ]];then base_dir=$8;fi
if [[ -n $9 ]];then package_name=$9;fi
if [[ -n ${10} ]];then master_password=${10};fi

if [[ ! -n $(grep $install_group /etc/group) ]];then
  logging 'Create default installation group.'
  groupadd -g 3001 $install_group &>>${log_path}
fi

if [[ $(id $username &>>${log_path};echo $?) -eq 0 ]];then
  logging 'The user ['$username'] is exists, skip create.'
  usermod -g oinstall -G dba,asmdba,oper,$install_group $username &>>${log_path}
else
  logging 'Create user ['$username'].'
  useradd -g oinstall -G dba,asmdba,oper,$install_group $username &>>${log_path}
  logging 'Update secret pass.'
  echo "$password" | passwd --stdin $username &>>${log_path}
fi

if [[ ! $? -eq 0 ]];then
 echo "depend install failed"
# exit 2
fi

logging 'Completed, configuration hosts mapping.'
/etc/init.d/oracleasm configure <<EOF
grid
oinstall
y
y
EOF

#数据盘自动分区	
 disk=`cat /proc/partitions|grep -v name|grep -v ram|awk '{print $4}'|grep -v '^$'|grep -v '[0-9]$'|grep -v 'vda'|grep -v 'xvda'|grep -v 'sda'|grep -e 'vd' -e 'sd' -e 'xvd'|tail -1`
 isM=`df -P|grep '/dev/${disk}1'`
		if [ "$isM" != "" ];then
			echo "/dev/${disk}1 has been mounted."
			continue;
		fi
			
		#判断是否存在未分区磁盘
		isP=`fdisk -l /dev/$disk |grep -v 'bytes'|grep "$disk[1-9]*"`
		if [ "$isP" = "" ];then
				#开始分区
				fdisk -S 56 /dev/$disk << EOF
n
p
1


wq
EOF
&>>${log_path}
			sleep 5
			#检查是否分区成功
			checkP=`fdisk -l /dev/$disk|grep "/dev/${disk}1"`
			if [ "$checkP" != "" ];then
			echo "diskpart is ok"
			fi
		fi
		
###########################################################################
oracleasm createdisk ORACLEFRA1 /dev/sdc1 &>>${log_path}
if [[ ! $? -eq 0 ]];then
 echo "exec failed"
  exit 2
fi
###########################################################################

oracleasm createdisk ORACLEASM1 /dev/${disk}1 &>>${log_path}
if [[ ! $? -eq 0 ]];then
 echo "exec failed"
  exit 2
fi

# 配置hosts文件
cat >> /etc/hosts << EOF
$master       $oracle_sid_standby
$standby     $oracle_sid
EOF

limits_list=(
"$username soft nproc unlimited"
"$username hard nproc unlimited"
"$username soft nofile unlimited"
"$username hard nofile unlimited"
"$username soft stack unlimited"
)

for ((i=0; i< ${#limits_list[*]}; i++))
do
line=$(echo "${limits_list[$i]}"|awk '{printf $1}')
sed -i "/$line/d" /etc/security/limits.conf &>>${log_path}
echo "${limits_list[$i]}" >>/etc/security/limits.conf
done

#安装grid
logging 'Completed, start install grid app .'
su - grid -c "$temp_dir/grid/runInstaller -responseFile $temp_dir/grid/response/grid_install.rsp -silent -ignorePrereq -showProgress -IgnoreSysPreReqs "
if [[ ! $? -eq 0 ]];then
 echo "exec failed"
  exit 2
fi

# Watching the installation process.
running=true
while ($running); do
	#statements
	sleep 10
	printf "."
	if [ -f $oracle_inventory/logs/silentInstall*.log ]; then
		if [[ $(grep "successful" $oracle_inventory/logs/silentInstall*.log) ]]; then
			echo -e '\n'
			logging "Completed, Start setting the default database."
			running=false
		fi
	fi
	if [ -f $oracle_inventory/log/*.err ]; then
		if [ $(cat $oracle_inventory/logs/*.err) ];then
			echo -e '\n'
			logging "Failed, check out [$log_path]."
			exit 2
		fi
	fi
done

$grid_home/root.sh &>>${log_path}
if [[ ! $? -eq 0 ]];then
 echo "exec failed"
 exit 2
fi
sleep 10

cat > /home/grid/cfgrsp.properties <<EOF
oracle.assistants.asm|S_ASMPASSWORD=$password
oracle.assistants.asm|S_ASMMONITORPASSWORD=$password
EOF


su - grid -c "$grid_home/cfgtoollogs/configToolAllCommands RESPONSE_FILE=/home/grid/cfgrsp.properties"  &>>${log_path}
if [[ ! $? -eq 0 ]];then
 echo "exec failed"
fi
sleep 10

logging 'Completed, start install oracle app .'
su - $username -c "unset DISPLAY;$temp_dir/database/runInstaller -silent -ignorePrereq -responseFile $oracle_install_file" &>>${log_path}

# Watching the installation process.
running=true
while ($running); do
	#statements
	sleep 10
	printf "."
	if [[ $(grep "Oracle Database 11g was successful" $oracle_inventory/logs/silentInstall*.log) ]]; then
			echo -e '\n'
			logging "Completed, Start setting the default database."
			running=false
	fi
	if [ -f $oracle_inventory/log/*.err ]; then
		if [ $(cat $oracle_inventory/logs/*.err) ];then
			echo -e '\n'
			logging "Failed, check out [$log_path]."
			exit 2
		fi
	fi
done

sqlplus /nolog <<EOF
conn / as sysdba;
startup;
alter database recover managed standby database using current logfile disconnect;
exit;
EOF

service mysqld start
  if [[ $? -eq 0 ]];then
    chkconfig mysqld on
    logging "Completed, startup by systemd ."
  else
    service mysqld status &>>${log_path}
    logging "Service startup failed, pls checkout ${log_path} ."
    exit
  fi
temporary=$(grep generated $root_dir/log/error.log | awk  '{print $NF}')
mysql -uroot -p"${temporary}" --connect-expired-password  -e "alter user user() identified by '${password}';" &>>${log_path}
mysql -uroot -p"${password}" -e "grant replication slave, replication client, reload on *.* to '${repl}'@'%' identified by '${repl_password}';"
mysqldump -uroot -p"${password}" -R --single-transaction --set-gtid-purged=OFF --master-data=2 -A > ${root_dir}/full_backup.sql
sshpass -p"${slave_pass}" scp -rp -o stricthostkeychecking=no ${root_dir}/full_backup.sql root@${slave_ip}:/tmp  &>>${log_path}

for i in {0..2}
do /usr/local/redis/${package_dir}/utils/install_server.sh <<EOF
700$i

/usr/local/redis/bin/redis-server

EOF
done  &>>${log_path}

for q in {3..5} 
do sshpass -p"${node_pass}" ssh -o stricthostkeychecking=no root@${node_ip} "/usr/local/redis/${package_dir}/utils/install_server.sh <<EOF 
700$q


logging "Completed, next start the installation node2 rabbitmq ..."
sshpass -p"${node1_pass}" scp -rp -o stricthostkeychecking=no ${root_dir}/${pack_dir} root@${node1_ip}:${root_dir} &>>${log_path}
sshpass -p"${node2_pass}" scp -rp -o stricthostkeychecking=no ${root_dir}/${pack_dir} root@${node2_ip}:${root_dir} &>>${log_path}
sshpass -p"${node1_pass}" scp -rp -o stricthostkeychecking=no /etc/yum.repos.d/rabbitmq.repo root@${node1_ip}:/etc/yum.repos.d/ &>>${log_path}
sshpass -p"${node2_pass}" scp -rp -o stricthostkeychecking=no /etc/yum.repos.d/rabbitmq.repo root@${node2_ip}:/etc/yum.repos.d/ &>>${log_path}


logging "start system configuration ..."
#hostname mq01
hostnamectl --static set-hostname mq01
sshpass -p"${node1_pass}" ssh -o stricthostkeychecking=no root@${node1_ip} "hostnamectl --static set-hostname mq02"  &>>${log_path}
sshpass -p"${node2_pass}" ssh -o stricthostkeychecking=no root@${node2_ip} "hostnamectl --static set-hostname mq03"  &>>${log_path}

#sed -i 's/^HOSTNAME=.*/HOSTNAME=mq01/' /etc/sysconfig/network
#sshpass -p"${node1_pass}" ssh -o stricthostkeychecking=no root@${node1_ip} "sed -i 's/^HOSTNAME=.*/HOSTNAME=mq02/' /etc/sysconfig/network"  &>>${log_path}
#sshpass -p"${node2_pass}" ssh -o stricthostkeychecking=no root@${node2_ip} "sed -i 's/^HOSTNAME=.*/HOSTNAME=mq03/' /etc/sysconfig/network"  &>>${log_path}

cat >> /etc/hosts <<EOF
$IP mq01
$node1_ip mq02
$node2_ip mq03
EOF
sshpass -p"${node1_pass}" ssh -o stricthostkeychecking=no root@${node1_ip} "cat >> /etc/hosts <<EOF
$IP mq01
$node1_ip mq02
$node2_ip mq03
EOF"  &>>${log_path}

logging "####################################"
logging "url: http://${IP}:15672"
logging "Username: admin"
logging "Password: ${password} "
logging "####################################"
echo 0

# 初始化日志输出方法
function logging(){
        local_date=$(date +"%H:%M:%S")
        logger -t $0 $1
        echo "[ $USER $local_date ]: $1" | tee -a ${log_path}
}

function yum_server(){
logging "Completed, next setting up repository ..."
if [ "$(uname -r | cut -c 12-14)" = "el6" ];then
  cat >/etc/yum.repos.d/rhel6.repo<<EOF
[base]
name=Red Hat Enterprise Linux 6.4
baseurl=http://192.16.4.61/rhel6.4/
enabled=1
gpgcheck=0
EOF
	elif [ "$(uname -r | cut -c 12-14)" = "el7" || "$(awk  -F " "  '{print $4}' /etc/redhat-release)" = "7.8.2003" ];then
    cat >/etc/yum.repos.d/rhel7.repo<<EOF
[base]
name=Red Hat Enterprise Linux 7.4
baseurl=http://192.16.4.61/rhel7.4/
enabled=1
gpgcheck=0
EOF
	else
	logging 'The current system software pack is missing.' 
fi
yum repolist &>>${log_path}
if [[ ! $? -eq 0 ]];then
  "setting up repository failed, pls checkout ${log_path} ."
  exit
fi
}

yum install gcc gcc-c++ make automake autoconf libtool pcre pcre-devel zlib openssl openssl-devel -y &>>${log_path}
if [[ ! $? -eq 0 ]];then
  logging "install failed, pls checkout ${log_path} ."
  exit
fi

logging "Completed, next downloading nginx ..."
curl -k -o ${root_dir}/${file_name} ${file_url}/${file_name} &>>${log_path}
package_dir=`tar tf ${root_dir}/${file_name} |head -1`

tar xf ${root_dir}/${file_name} -C ${root_dir}

logging "Completed, next install nginx ..."
cd ${root_dir}/${package_dir}
./configure --prefix=${root_dir} --user=nginx --group=nginx  --with-http_ssl_module --with-http_realip_module   &>>${log_path}
make  &>>${log_path} && make install  &>>${log_path}
if [[ ! $? -eq 0 ]];then
  logging "install failed, pls checkout ${log_path} ."
  exit
fi

logging "###########################################"
logging "URL地址: http://$IP"
logging "###########################################"
