jenkins
#!/bin/bash –xe
set -xe
cd /home/lab_idljenk/conv_perf_bench
python mkldnn_sha_monitor.py

#!/bin/bash -xe
cd /home/lab_idljenk/conv_perf_bench
./weekly.sh

case "$DATA_TYPE" in
        TxtDataLayer)
            DATA_TYPE="image"
            DATABASE="ImageDataLayer"
            ;;
        LMDBDataLayer)
            DATA_TYPE="lmdb"
            DATABASE="LMDBDataLayer"
            ;;
        Compressed_LMDBDataLayer)
            DATA_TYPE="lmdb"
            DATABASE="Compressed_LMDBDataLayer"
            ;;
        NoDataLayer)
            DATA_TYPE="nodata"
            DATABASE="NoDataLayer"
            ;;
Esac
  if [ $SHA != "NULL" ]; then
    git checkout $SHA
  fi


SERVERS=($(echo $BUILDS | sed "s/,/ /g"))
for SERVER in ${SERVERS[@]}
do
  wget -O "${SERVER}.out" http://10.91.54.11:8080/job/IntelCaffe_Artemis_Multinode_Train/label=Artemis/${SERVER}/consoleText
done
  if [ $(cat iter.log | wc -l) -lt 100 ]; then
    ACC=1
  else
    ACC=$[$(cat iter.log | wc -l)/$ACCURACY]
  Fi
  i=0
  while [ $i -lt $NODES_NUMBER ]
  do
      grep "Iteration" consoleText | grep "^\[${i}]" | sed "s/.*loss = //" > ${i}.log
      echo "\"stat_$SERV.chart\" using 1:$[$i+3]:xtic(2) with linespoints pt 7 title \"NODE_${i}\", \\" >> chart_${SERV}.in
      i=$[$i+1]
  done
  i=1
  while [ $i -le $max ]
  do
      ITER=`sed -n "$i"p iter.log`
      j=0
      while [ $j -lt $NODES_NUMBER ]
      do
          NODE=`sed -n "$i"p ${j}.log`
          ITER="$ITER $NODE"
          j=$[$j+1]
      done
      echo "$i $ITER"
      echo "$i $ITER" >> stat_${SERV}.chart
      i=$[$i+$ACC]
  done
if [ "${TEST_START_TIME}" == NULL ];
then
curl "http://intel-caffe.sh.intel.com/intelcaffe_dashboard_revision_te-caffe_dashboard/index.php?r=er/index"
else
curl "http://intel-caffe.sh.intel.com/intelcaffe_dashboard_revision_te-caffe_dashboard/index.php?r=er/index&test_start_time=$(echo ${TEST_START_TIME} | sed "s/ /%20/g" )"
fi
function CollectResults() {

    cd ${target_work_dir}/DeepBench/code/intel/spmm

    line=$(cat spmm_bench_1.log |wc -l)
    for ((i=1;i<=${line};i++))
    do

        j=0
        sum=0
        for f in spmm_bench_*.log
        do
            awk -v i=$i -v j=$j -F '|' '{
                if (NR == i){
                    if (j == 0){
                        printf ("%s\t%s\t%s\t%s|\t%s|\t",$1,$2,$3,$4,$5)
                    }else {
                        printf ("%s|\t",$5)
                    }
                }
            }' $f

            tmp=$(awk -v i=$i -F '|' '{
                if (NR == i){
                    printf ("%f",$5)
                }
            }' $f)
            sum=$(echo |awk -v tmp=${tmp} -v sum=${sum} '{
                printf ("%f",tmp + sum)
            }')
            ((j++))
        done

        # AVG
        avg=$(echo |awk -v j=$j -v sum=$sum '{
            printf ("%f",sum/j)
        }')

        # STD
        j=0
        sum=0
        for f in spmm_bench_*.log
        do
            tmp=$(awk -v i=$i -F '|' '{
                if (NR == i){
                    printf ("%f",$5)
                }
            }' $f)
            sum=$(echo |awk -v tmp=${tmp} -v avg=${avg} -v sum=${sum} '{
                printf ("%0.1000f",(tmp - avg) * (tmp - avg) + sum)
            }')
            ((j++))
        done
        std=$(echo |awk -v j=$j -v sum=${sum} '{
            printf ("%0.20f",sum/j)
        }')

        # Print avg,std
        if [ $i -eq 1 ];then
            printf "[ avg\tstd ]\n"
        else
            printf "[ ${avg}\t${std} ]\n"
        fi
    done
}
if [ $(echo $?) -eq 0 ];then
    CollectResults
Fi

cat > ${CAFFE_HOME}/run_fast_rcnn.sh << EOF
export http_proxy=http://child-prc.intel.com:913
export https_proxy=http://child-prc.intel.com:913
export ftp_proxy=http://child-prc.intel.com:913
cd $SCRIPT_HOME
/bin/bash -x ./Faster-RCNN_test.sh $CAFFE_HOME
if [ \$? -ne 0 ];then
	exit 1
fi
if [ ${CODE_COVERAGE} == true ];then
	bash -xe ${CAFFE_HOME}/caffe-ccov/ccov.sh ${CAFFE_HOME}
fi
EOF
srun -p skx-8180 --qos por-val bash -x ${CAFFE_HOME}/run_fast_rcnn.sh
srun -p ${HOSTNAME} bash -x ${CAFFE_HOME_A}/test_faster_rcnn.sh
git clone https://github.com/Microsoft/caffe.git caffe-fast-rcnn
cd caffe-fast-rcnn
patch -p1 <${TARGET_WORK_DIR}/caffe.patch
git show

[root@localhost tmp]# grep -niv  '^root' passwd   #-v取反
[root@localhost tmp]# grep  -nB 3 '^ftp' passwd 
9-mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
10-operator:x:11:0:operator:/ROOT:/sbin/nologin
11-games:x:12:100:games:/usr/games:/sbin/nologin
12:ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin
[root@localhost tmp]# grep  -nA 3 '^ftp' passwd 
12:ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin
13-nobody:x:99:99:Nobody:/:/sbin/nologin
14-systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin
15-dbus:x:81:81:System message bus:/:/sbin/nologin
[root@localhost tmp]# grep  -nC 3 '^ftp' passwd 
9-mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
10-operator:x:11:0:operator:/ROOT:/sbin/nologin
11-games:x:12:100:games:/usr/games:/sbin/nologin
12:ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin
13-nobody:x:99:99:Nobody:/:/sbin/nologin
14-systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin
15-dbus:x:81:81:System message bus:/:/sbin/nologin
[root@localhost tmp]# grep  -w 'hello' passwd   #按单词搜索
hello  world
[root@localhost tmp]# grep  'root' passwd 
root:x:0:0:ROOT:/root:/bin/bash
[root@localhost tmp]# grep  -o  'root' passwd   #打印匹配关键字
root
root
[root@localhost tmp]# cut  -d: -f1,7  passwd | head  #截取第1列和第7列，不是第一列到第7列
root:/bin/bash
bin:/sbin/nologin
daemon:/sbin/nologin
adm:/sbin/nologin
lp:/sbin/nologin
sync:/bin/sync
shutdown:/sbin/shutdown
halt:/sbin/halt
mail:/sbin/nologin
operator:/sbin/nologin
[root@localhost tmp]# cut -c1-5 passwd  #截取列前5个字符
root:
bin:x
daemo
adm:x
lp:x:
[root@localhost tmp]# cut -c10-  passwd  #截取列从第10个字符开始到最后
0:ROOT:/root:/bin/bash
:bin:/bin:/sbin/nologin
2:2:daemon:/sbin:/sbin/nologin
:adm:/var/adm:/sbin/nologin
[root@sige1 ~]# runlevel | cut -c3
5
[root@sige1 ~]# runlevel | cut -d ' ' -f2
5
[root@sige1 ~]# grep -v '^#' /etc/inittab | cut -d: -f2
5
[root@sige1 ~]# grep  '^id' /etc/inittab | cut -d: -f2
5
[root@sige1 ~]# grep "initdefault:$" /etc/inittab|cut -c4
5
[root@sige1 tmp]# sort -nr -t: -k3 1.txt    #-n以数字排序，r降序，-t分隔符  -k3第3列
uucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologin
mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
halt:x:7:0:halt:/sbin:/sbin/halt
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
sync:x:5:0:sync:/sbin:/bin/sync
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
bin:x:1:1:bin:/bin:/sbin/nologin
root:x:0:0:root:/root:/bin/bash

[root@sige1 tmp]# sort -nr -t: -k3 1.txt -o 2.txt   #把文件输出到2.txt文件里-o就是output
[root@sige1 tmp]# cat 2.txt
[root@sige1 tmp]# cat 3.txt
aaa
111
aaa
444
555
555
555
111
aaa
aaa
[root@sige1 tmp]# sort -u 3.txt   #-u去重复排序
111
444
555
aaa
[root@sige1 tmp]# sort -uR 3.txt  #R随机排序
[root@sige1 tmp]# uniq 3.txt      #去除连续的重复的行,不连续不去除
aaa
111
aaa
444
555
111
aaa
[root@sige1 tmp]# sort -u 3.txt  #去除所有重复的行,不管连不连续
111
444
555
aaa
[root@sige1 tmp]# uniq -c 3.txt  #统计重复行的个数
      1 aaa
      1 111
      1 aaa
      1 444
      3 555
      1 111
      2 aaa
[root@sige1 tmp]# uniq -d 3.txt  #只显示重复的行
555
aaa
[root@sige1 tmp]# uniq -cd 3.txt
      3 555
      2 aaa
[root@sige1 tmp]# echo hello world|tee 11.txt
hello world
[root@sige1 tmp]# cat 11.txt
hello world
[root@sige1 tmp]# echo 999|tee 11.txt    #tee屏幕上打印一份保存到文件里一份，后面覆盖前面
999
[root@sige1 tmp]# cat 11.txt
999
[root@sige1 tmp]# echo 888 |tee -a 11.txt  #-a追加
888
[root@sige1 tmp]# cat 11.txt
999
888
[root@sige1 vsftpd]# grep  -v '^#'  vsftpd.conf | grep  -v  '^$'|tee vsftp.conf.bak
[root@sige1 vsftpd]# cat  vsftp.conf.bak 
anonymous_enable=YES
local_enable=YES
write_enable=YES
local_umask=022
dirmessage_enable=YES
xferlog_enable=YES
connect_from_port_20=YES
xferlog_std_format=YES
listen=YES
pam_service_name=vsftpd
userlist_enable=YES
tcp_wrappers=YES
[root@sige1 vsftpd]# tail  -1  /etc/bashrc
alias grep='grep --color=auto'
[root@sige1 vsftpd]# source  /etc/bashrc
[root@sige1 tmp]# cat  file1
aaaa
111
hello world
222
333
bbb
[root@sige1 tmp]# cat  file2
aaa
hello
111
222
bbb
333
world
[root@sige1 tmp]# cat -n  file1
     1	aaaa
     2	111
     3	hello world
     4	222
     5	333
     6	bbb
[root@sige1 tmp]# cat -n  file2
     1	aaa
     2	hello
     3	111
     4	222
     5	bbb
     6	333
     7	world
[root@sige1 tmp]# diff  file1 file2
1c1,2
< aaaa
---
> aaa
> hello
3d3
< hello world
5d4
< 333
6a6,7
> 333
> world
[root@sige1 tmp]# diff -c  file1 file2
*** file1	2019-09-14 23:51:04.498485266 +0800
--- file2	2019-09-14 23:51:37.160485346 +0800
***************
*** 1,6 ****
! aaaa
  111
- hello world
  222
- 333
  bbb
--- 1,7 ----
! aaa
! hello
  111
  222
  bbb
+ 333
+ world
[root@sige1 tmp]# >file1   #清空file1文件里的内容
[root@sige1 tmp]# diff  -u  file1 file2
--- file1	2019-09-15 00:04:47.016485030 +0800
+++ file2	2019-09-14 23:51:37.160485346 +0800
@@ -1,7 +1,7 @@
-aaaa
+aaa
+hello
 111
-hello world
 222
-333
 bbb
-
+333
+world










